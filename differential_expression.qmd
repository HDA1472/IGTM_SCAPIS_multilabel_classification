---
title: "differential_expression"
format: html
editor: source
---

```{r setup, message = FALSE, warning = FALSE, results = 'hide'}
library(HDAnalyzeR)
library(tidyverse)
library(tidyheatmaps)
library(forcats)
library(patchwork)
library(fmsb)
library(corrplot)
library(igraph)
library(ggraph)
```

# Import data & metadata

```{r, message = FALSE, results = 'hide'}
data_scapis <- import_df("data/processed_data/scapis_joined_preprocessed.rda")
data_igt <- import_df("data/processed_data/igt_joined_preprocessed.rda")
metadata <- import_df("data/processed_data/metadata_preprocessed.rda")
```

# Differential Expression - limma

```{r}
disease_vec <- c("Obesity", "IGT", "T2D", "MS", "MASLD", "Carotid_plaque", "CAC", "Sleep_apnea")
```

```{r}
disease_palette <- c("Obesity" = "#E7662B", 
                     "IGT" = "#836879", 
                     "T2D" = "#321433",
                     "MS" = "#08585A", 
                     "MASLD" = "#FFD321", 
                     "Carotid_plaque" = "#E8A29A", 
                     "CAC" = "#9E0142", 
                     "Sleep_apnea" = "#A6CEE3")
```

```{r}
metadata_cols <- c("Sex", "Age", "Smoke_status", "MAP_Mean", "HbA1c", "Chol", "LDL", "HDL", "TG", "ALT", "GGT", "Urate", "Crea", "eGFR", "CRP", "Hb", "WBC", "PLT")
```

## IGT

```{r}
res_igt <- lapply(disease_vec, function(disease) {
  print(paste(disease, "Case:"))
  
  discovery_cohort <- data_igt |>
    select(-all_of(disease_vec)) |> 
    select(-any_of(metadata_cols))
  
  if (disease %in% c("Obesity", "Sleep_apnea")) {
    correct <- c("Age", "Sex")
    correct_type <- c("numeric", "factor")
  } else {
    correct <- c("Age", "Sex", "BMI")
    correct_type <- c("numeric", "factor", "numeric")
  }
  de_res <- do_limma(discovery_cohort, 
                     metadata |> rename(Disease = disease), 
                     "Disease", 
                     case = 1, 
                     control = 0,
                     correct = correct,
                     correct_type = correct_type,
                     logfc_lim = 0,
                     top_up_prot = 3,
                     top_down_prot = 0)
})

names(res_igt) <- disease_vec
```

```{r}
de_all_igt <- lapply(disease_vec, function(disease) {
    de_res <- res_igt[[disease]]$de_results |> mutate(Disease = disease)
  })
de_all_igt <- bind_rows(de_all_igt)
```

```{r}
volcanos_all_igt <- lapply(disease_vec, function(disease) {
    de_res <- res_igt[[disease]]$volcano_plot
  })

names(volcanos_all_igt) <- disease_vec
```

## SCAPIS

```{r}
res_scapis <- lapply(disease_vec, function(disease) {
  print(paste(disease, "Case:"))
  
  discovery_cohort <- data_scapis |>
    select(-all_of(disease_vec)) |> 
    select(-any_of(metadata_cols))
  
  if (disease %in% c("Obesity", "Sleep_apnea")) {
    correct <- c("Age", "Sex")
    correct_type <- c("numeric", "factor")
  } else {
    correct <- c("Age", "Sex", "BMI")
    correct_type <- c("numeric", "factor", "numeric")
  }
  de_res <- do_limma(discovery_cohort, 
                     metadata |> rename(Disease = disease), 
                     "Disease", 
                     case = 1, 
                     control = 0,
                     correct = correct,
                     correct_type = correct_type,
                     logfc_lim = 0,
                     top_up_prot = 3,
                     top_down_prot = 0)
})

names(res_scapis) <- disease_vec
```

```{r}
de_all_scapis <- lapply(disease_vec, function(disease) {
    de_res <- res_scapis[[disease]]$de_results |> mutate(Disease = disease)
  })
de_all_scapis <- bind_rows(de_all_scapis)
```

```{r}
volcanos_all_scapis <- lapply(disease_vec, function(disease) {
    de_res <- res_scapis[[disease]]$volcano_plot
  })

names(volcanos_all_scapis) <- disease_vec
```

# Analysis of DE results

## Summary DE results

```{r}
barplot_data <- de_all_igt |>
  bind_rows() |>
  mutate(sig = factor(sig, levels = c("not significant", "significant down", "significant up"))) |>
  group_by(Disease, sig) |>
  summarise(Count = n()) |>
  ungroup()

de_prot_n <- barplot_data |>
  filter(sig == "significant up" | sig == "significant down") |>
  group_by(Disease) |>
  summarize(sum = sum(Count)) |>
  ungroup() |> 
  select(Disease, sum) |> 
  unique() |> 
  bind_rows(data.frame(Disease = "Sleep_apnea", sum = 0))

barplot_data |>
  left_join(de_prot_n, by = "Disease") |>
  ggplot(aes(x = Count, y = reorder(Disease, sum), fill = sig)) +
  geom_bar(stat = "identity", position = "stack") +
  labs(x = "Number of proteins", y = "", fill = "Significance") +
  theme_hpa(angled = T) +
  theme(legend.position = "top",
        legend.title = element_text(face = "bold")) +
  scale_fill_hpa("diff_exp") +
  scale_x_continuous(limits=c(0, 1500), breaks=c(0, 1500))
    
```

## Top proteins boxplots

```{r}
disease_palette_boxplot <- c("Obesity" = "#E7662B", 
                             "IGT" = "#836879", 
                             "T2D" = "#321433",
                             "MS" = "#08585A", 
                             "MASLD" = "#FFD321", 
                             "Carotid_plaque" = "#E8A29A", 
                             "CAC" = "#9E0142", 
                             "Sleep_apnea" = "#A6CEE3",
                             "Other Disease" = "grey70",
                             "Healthy" = "grey90")

top_proteins <- de_all_igt |> 
  filter(adj.P.Val < 0.05) |> 
  group_by(Disease) |>
  arrange(Disease, desc(logFC)) |>
  slice_head(n = 3) |> 
  ungroup() |> 
  rename(Protein = Assay)

top_proteins_vec <- top_proteins |> 
  pull(Protein)

plot_data <- data_igt |> 
  select(DAid, all_of(disease_vec), all_of(top_proteins_vec)) |> 
  pivot_longer(cols = -c(DAid, disease_vec), names_to = "Protein", values_to = "Value") |> 
  left_join(top_proteins |> select(Protein, Disease) |> unique(), 
            by = "Protein", 
            relationship = "many-to-many") |> 
  mutate(Disease_Value = case_when(
    Disease == "Obesity" ~ Obesity,
    Disease == "CAC" ~ CAC,
    Disease == "T2D" ~ T2D,
    Disease == "MS" ~ MS,
    Disease == "MASLD" ~ MASLD,
    Disease == "Carotid_plaque" ~ Carotid_plaque,
    Disease == "IGT" ~ IGT,
    TRUE ~ NA_real_
  )) |> 
  mutate(Any_disease = Obesity + CAC + T2D + MS + MASLD + Carotid_plaque + IGT) |> 
  mutate(Disease_Value = case_when(
    Disease_Value == 1 ~ Disease,
    Any_disease == 0 ~ "Healthy",
    Disease_Value == 0 ~ "Other Disease",
    TRUE ~ "Control"  # Default case for NA values
  )) |> 
  mutate(Disease_protein = paste(Disease, Protein, sep = "_"))

plot_data |> 
  ggplot(aes(x = factor(Disease_Value, 
                        levels = c("Healthy", 
                                   "Other Disease", 
                                   unique(Disease[!is.na(Disease_Value)]))), 
             y = Value, 
             fill = Disease_Value)) +
  geom_boxplot(position = position_dodge(0.8), outlier.size = 1.5) +
  scale_fill_manual(values = disease_palette_boxplot) +
  facet_wrap(~Disease_protein, scales = "free", nrow = 3) +
  labs(x = "", y = "") +
  theme_hpa() + 
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1))
```

## Top-proteins radar plots

```{r}
disease_palette_boxplot <- c("Obesity" = "#E7662B", 
                             "IGT" = "#836879", 
                             "T2D" = "#321433",
                             "MS" = "#08585A", 
                             "MASLD" = "#FFD321", 
                             "Carotid_plaque" = "#E8A29A", 
                             "CAC" = "#9E0142", 
                             "Sleep_apnea" = "#A6CEE3",
                             "Other Disease" = "grey70",
                             "Healthy" = "grey90")

top_proteins <- de_all_igt |> 
  filter(adj.P.Val < 0.05) |> 
  group_by(Disease) |>
  arrange(Disease, desc(logFC)) |>
  slice_head(n = 8) |> 
  ungroup() |> 
  rename(Protein = Assay)

top_proteins_vec <- top_proteins |> 
  pull(Protein)

radar_data <- data_igt |> 
  select(DAid, all_of(disease_vec), all_of(top_proteins_vec)) |> 
  pivot_longer(cols = -c(DAid, disease_vec), names_to = "Protein", values_to = "Value") |> 
  left_join(top_proteins |> select(Protein, Disease) |> unique(), 
            by = "Protein", 
            relationship = "many-to-many") |> 
  mutate(Disease_Value = case_when(
    Disease == "Obesity" ~ Obesity,
    Disease == "CAC" ~ CAC,
    Disease == "T2D" ~ T2D,
    Disease == "MS" ~ MS,
    Disease == "MASLD" ~ MASLD,
    Disease == "Carotid_plaque" ~ Carotid_plaque,
    Disease == "IGT" ~ IGT,
    TRUE ~ NA_real_
  )) |> 
  mutate(Any_disease = Obesity + CAC + T2D + MS + MASLD + Carotid_plaque + IGT) |> 
  mutate(Disease_Value = case_when(
    Disease_Value == 1 ~ Disease,
    Any_disease == 0 ~ "Healthy",
    Disease_Value == 0 ~ "Other Disease",
    TRUE ~ "Control"  # Default case for NA values
  )) |> 
  group_by(Disease, Disease_Value, Protein) |>
  summarise(Value = mean(Value), .groups = "drop")


for (i in seq_along(disease_vec)) {
  disease <- disease_vec[i]
  
  radar_dat <- radar_data |> 
    filter(Disease == disease) |> 
    select(-Disease) |>
    pivot_wider(names_from = Protein, values_from = Value) |>
    column_to_rownames(var = "Disease_Value")
  
  # min_row <- radar_dat |> summarise(across(everything(), min))
  # max_row <- radar_dat |> summarise(across(everything(), max))
  overall_min <- floor(min(as.matrix(radar_dat), na.rm = TRUE))
  overall_max <- ceiling(max(as.matrix(radar_dat), na.rm = TRUE))
  min_row <- as.data.frame(matrix(overall_min, nrow = 1, ncol = ncol(radar_dat)))
  max_row <- as.data.frame(matrix(overall_max, nrow = 1, ncol = ncol(radar_dat)))
  colnames(min_row) <- colnames(radar_dat)
  colnames(max_row) <- colnames(radar_dat)
  
  radar_dat <- bind_rows(max_row, min_row, radar_dat)
  rownames(radar_dat)[1:2] <- c("1", "2")
  radar_dat <- radar_dat |> slice(match(c("1", "2", disease, "Other Disease", "Healthy"), rownames(radar_dat)))
  color_order <- disease_palette_boxplot[c(disease, "Other Disease", "Healthy")]
  colors_alpha <- sapply(color_order, alpha, alpha = 0.5)
  
  plot_filename <- paste0("results/plots/radar_plot_", disease, ".png")
  png(plot_filename, width = 600, height = 600)
  radarchart(radar_dat, 
             axistype=1,
             pcol=color_order, 
             pfcol=colors_alpha, 
             plwd=4, 
             plty=1,
             cglcol="grey", 
             cglty=1, 
             axislabcol="black", 
             caxislabels=seq(overall_min, overall_max, 0.5), 
             cglwd=0.8,
             vlcex=0.8)
  
  dev.off()
}
```

## Protein heatmaps

Top 20 proteins for each disease according to logFC. LogFC > 0.1 and adj.P.val < 0.05.

```{r}
top_proteins <- de_all_igt |> 
  filter(adj.P.Val < 0.05, logFC > 0.1) |> 
  arrange(desc(logFC)) |> 
  group_by(Disease) |>
  top_n(20, logFC) |> 
  ungroup() |> 
  pull(Assay)

de_all_igt |>
  filter(Assay %in% top_proteins) |>
  filter(adj.P.Val < 0.05, logFC > 0.1) |> 
  select(Disease, Assay, logFC) |> 
  rename(Protein = Assay) |> 
  pivot_wider(names_from = Disease, values_from = logFC) |>
  mutate(across(everything(), ~ replace_na(., 0))) |> 
  pivot_longer(cols = -Protein, names_to = "Disease", values_to = "logFC") |> 
  tidyheatmap(
    rows = Protein,
    columns = Disease,
    values = logFC,
    colors = c("white", "red4"),
    cluster_rows = TRUE,
    cluster_cols = TRUE,
    show_colnames = TRUE,
    clustering_method = "ward.D2")
```

Stricter filtering.

```{r}
de_all_igt |> 
  filter(adj.P.Val < 0.05, logFC > 0.5) |> 
  arrange(desc(logFC)) |> 
  select(Disease, Assay, logFC) |> 
  rename(Protein = Assay) |> 
  pivot_wider(names_from = Disease, values_from = logFC) |>
  mutate(across(everything(), ~ replace_na(., 0))) |> 
  pivot_longer(cols = -Protein, names_to = "Disease", values_to = "logFC") |> 
  tidyheatmap(
    rows = Disease,
    columns = Protein,
    values = logFC,
    colors = c("white", "red4"),
    cluster_rows = TRUE,
    cluster_cols = TRUE,
    show_colnames = TRUE,
    clustering_method = "ward.D2")
```

## Annotate proteins with LASSO importance

```{r}
lasso_onlyproteins_features <- readRDS("results/models_results/lasso_onlyproteins_features.RData")
lasso_onlyproteins <- readRDS("results/models/lasso_binary_onlyproteins.RData")
```

Binary annotation of proteins with importance > 30.

```{r}
disease_palette_heatmap <- list(Obesity = c("0" = "white", "1" = "#E7662B"), 
                                IGT = c("0" = "white", "1" = "#836879"), 
                                T2D = c("0" = "white", "1" = "#321433"),
                                MS = c("0" = "white", "1" = "#08585A"), 
                                MASLD = c("0" = "white", "1" = "#FFD321"), 
                                Carotid_plaque = c("0" = "white", "1" = "#E8A29A"), 
                                CAC = c("0" = "white", "1" = "#9E0142"),
                                Sleep_apnea = c("0" = "white", "1" = "#A6CEE3"))

binary_disease_cols <- lasso_onlyproteins_features |> 
  filter(Scaled_Importance > 30) |> 
  select(-Importance, -Sign) |> 
  pivot_wider(names_from = Disease, values_from = Scaled_Importance) |> 
  mutate(across(where(is.numeric), ~ ifelse(is.na(.), 0, 1))) |> 
  rename(Protein = Variable)

top_proteins <- de_all_igt |> 
  filter(adj.P.Val < 0.05, logFC > 0.1) |> 
  arrange(desc(logFC)) |> 
  group_by(Disease) |>
  top_n(20, logFC) |> 
  ungroup() |> 
  pull(Assay)

de_all_igt |>
  filter(Assay %in% top_proteins) |>
  filter(adj.P.Val < 0.05, logFC > 0.1) |> 
  select(Disease, Assay, logFC) |> 
  rename(Protein = Assay) |> 
  pivot_wider(names_from = Disease, values_from = logFC) |>
  mutate(across(everything(), ~ replace_na(., 0))) |> 
  pivot_longer(cols = -Protein, names_to = "Disease", values_to = "logFC") |> 
  left_join(binary_disease_cols, by = "Protein") |> 
  mutate(across(everything(), ~ replace_na(., 0))) |> 
  tidyheatmap(
    rows = Disease,
    columns = Protein,
    values = logFC,
    colors = c("white", "red4"),
    annotation_col = c("Obesity", "IGT", "T2D", "MS", "MASLD", "Carotid_plaque", "CAC"),
    annotation_colors = disease_palette_heatmap,
    annotation_legend = FALSE,
    cluster_rows = TRUE,
    cluster_cols = TRUE,
    show_colnames = TRUE,
    clustering_method = "ward.D2"
  )
```

Continuous importance annotation. >0 filtering.

Metabolic syndrome is very interesting as the features with more than 50% (except 1) are not differentially expressed. However, MS is predicted with an AUC of 0.86.

```{r}
disease_palette_heatmap <- list(Obesity = c("0" = "white", "1" = "#E7662B"), 
                                IGT = c("0" = "white", "1" = "#836879"), 
                                T2D = c("0" = "white", "1" = "#321433"),
                                MS = c("0" = "white", "1" = "#08585A"), 
                                MASLD = c("0" = "white", "1" = "#FFD321"), 
                                Carotid_plaque = c("0" = "white", "1" = "#E8A29A"), 
                                CAC = c("0" = "white", "1" = "#9E0142"),
                                Sleep_apnea = c("0" = "white", "1" = "#A6CEE3"))

binary_disease_cols <- lasso_onlyproteins_features |> 
  filter(Scaled_Importance > 0) |> 
  select(-Importance, -Sign) |> 
  pivot_wider(names_from = Disease, values_from = Scaled_Importance) |> 
  mutate(across(everything(), ~ replace_na(., 0))) |> 
  rename(Protein = Variable)

top_proteins <- de_all_igt |> 
  filter(adj.P.Val < 0.05, logFC > 0.1) |> 
  arrange(desc(logFC)) |> 
  group_by(Disease) |>
  top_n(20, logFC) |> 
  ungroup() |> 
  pull(Assay)

de_all_igt |>
  filter(Assay %in% top_proteins) |>
  filter(adj.P.Val < 0.05, logFC > 0.1) |> 
  select(Disease, Assay, logFC) |> 
  rename(Protein = Assay) |> 
  pivot_wider(names_from = Disease, values_from = logFC) |>
  mutate(across(everything(), ~ replace_na(., 0))) |> 
  pivot_longer(cols = -Protein, names_to = "Disease", values_to = "logFC") |> 
  left_join(binary_disease_cols, by = "Protein") |> 
  mutate(across(everything(), ~ replace_na(., 0))) |> 
  tidyheatmap(
    rows = Disease,
    columns = Protein,
    values = logFC,
    colors = c("white", "red4"),
    annotation_col = c("Obesity", "IGT", "T2D", "MS", "MASLD", "Carotid_plaque", "CAC"),
    annotation_colors = disease_palette_heatmap,
    cluster_rows = TRUE,
    cluster_cols = TRUE,
    show_colnames = TRUE,
    clustering_method = "ward.D2"
  )
```

## Validation analysis

```{r}
disease_vec <- c("Obesity", "IGT", "T2D", "MS", "MASLD", "Carotid_plaque", "CAC")
```

```{r}
upreg_proteins_igt <- de_all_igt |> 
  select(Assay, Disease, logFC, adj.P.Val) |> 
  filter(logFC > 0, adj.P.Val < 0.05) |>
  arrange(desc(logFC)) |> 
  group_by(Disease) |>
  top_n(10, logFC) |>
  ungroup()
```

```{r}
plots <- list()

for (i in seq_along(disease_vec)) {
  disease <- disease_vec[i]
  
  p <- upreg_proteins_igt |> 
    filter(Disease == disease) |> 
    ggplot(aes(x = logFC, y = fct_reorder(Assay, logFC), color = Disease)) +
    geom_segment(aes(x = 0, xend = logFC, y = Assay, yend = Assay)) +
    geom_point(size = 4) +
    #geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
    scale_color_manual(values = disease_palette) +
    theme_hpa() +
    theme(legend.position = "none", plot.margin = margin(2, 0, 2, 0)) +
    xlim(0, 1.5) +
    labs(y = element_blank(), title = disease)
  
  # Remove x-axis and x-axis label for all but the last plot
  if (i < length(disease_vec)) {
    p <- p + theme(axis.line.x = element_blank(), 
                   axis.title.x = element_blank(), 
                   axis.text.x = element_blank(), 
                   axis.ticks.x = element_blank())
  } else {
    p <- p + labs(x = "logFC")
  }
  
  plots[[i]] <- p
}

combined_plot_igt <- wrap_plots(plots, ncol = 1) + 
  plot_annotation(title = 'IGTM Cohort') &
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))
combined_plot_igt
```

```{r}
plots <- list()

for (i in seq_along(disease_vec)) {
  disease <- disease_vec[i]
  
  p <- upreg_proteins_igt |> 
    left_join(de_all_scapis |> select(Assay, Disease, logFC, adj.P.Val), 
              by = c("Assay", "Disease")) |>
    filter(Disease == disease) |> 
    ggplot(aes(x = logFC.y, y = fct_reorder(Assay, logFC.x), color = Disease)) +
    geom_segment(aes(x = 0, xend = logFC.y, y = Assay, yend = Assay)) +
    geom_point(size = 4) +
    #geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
    scale_color_manual(values = disease_palette) +
    theme_hpa() +
    theme(legend.position = "none", plot.margin = margin(2, 0, 2, 0)) +
    xlim(0, 1.5) +
    labs(y = element_blank(), title = disease) +
    theme(axis.title.y = element_blank(), 
          axis.text.y = element_blank(), 
          axis.ticks.y = element_blank())
  
  # Remove x-axis and x-axis label for all but the last plot
  if (i < length(disease_vec)) {
    p <- p + theme(axis.line.x = element_blank(), 
                   axis.title.x = element_blank(), 
                   axis.text.x = element_blank(), 
                   axis.ticks.x = element_blank())
  } else {
    p <- p + labs(x = "logFC")
  }
  
  plots[[i]] <- p
}

combined_plot_scapis <- wrap_plots(plots, ncol = 1) + 
  plot_annotation(title = 'SCAPIS Cohort') &
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))
combined_plot_scapis
```

```{r}
lasso_onlyproteins_features <- readRDS("results/models_results/lasso_onlydeproteins_features_depanel.RData")
plots <- list()

for (i in seq_along(disease_vec)) {
  disease <- disease_vec[i]
  
  p <- upreg_proteins_igt |> 
    left_join(lasso_onlyproteins_features |> 
                rename(Assay = Variable) |> 
                mutate(Scaled_Importance = case_when(
                  Sign == "POS" ~ Scaled_Importance,
                  Sign == "NEG" ~ -Scaled_Importance,
                  TRUE ~ 0
                )) |> 
                select(Assay, Disease, Scaled_Importance), 
              by = c("Assay", "Disease")) |>
    filter(Disease == disease) |> 
    ggplot(aes(x = Scaled_Importance, y = fct_reorder(Assay, logFC), fill = Disease)) +
    geom_col() +
    geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
    scale_fill_manual(values = disease_palette) +
    theme_hpa() +
    theme(legend.position = "none", plot.margin = margin(2, 0, 2, 0)) +
    xlim(-100, 100) +
    theme(axis.line.y = element_blank(),
          axis.title.y = element_blank(), 
          axis.text.y = element_blank(), 
          axis.ticks.y = element_blank())
    
  
  # Remove x-axis and x-axis label for all but the last plot
  if (i < length(disease_vec)) {
    p <- p + theme(axis.line.x = element_blank(), 
                   axis.title.x = element_blank(), 
                   axis.text.x = element_blank(), 
                   axis.ticks.x = element_blank())
  } else {
    p <- p + labs(x = "Protein Importance (%)")
  }
  
  plots[[i]] <- p
}

combined_plot_ml <- wrap_plots(plots, ncol = 1) + 
  plot_annotation(title = 'LASSO model trained on IGTM') &
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))
combined_plot_ml
```

```{r}
plots <- list()

for (i in seq_along(disease_vec)) {
  disease <- disease_vec[i]
  print(disease)
  p <- upreg_proteins_igt |> 
    left_join(de_all_scapis |> select(Assay, Disease, logFC, adj.P.Val), 
              by = c("Assay", "Disease")) |>
    left_join(lasso_onlyproteins_features |> filter(Disease == disease) |> rename(Assay = Variable), 
              by = c("Assay", "Disease")) |> 
    filter(Disease == disease) |> 
    mutate(Scaled_Importance = ifelse(is.na(Scaled_Importance), 0, Scaled_Importance)) |>
    mutate(Validate = ifelse(logFC.y > 0 & logFC.x > 0 & Scaled_Importance > 0, 1, 0)) |>
    mutate(Validate = as.factor(Validate)) |> 
    ggplot(aes(x = "0", y = fct_reorder(Assay, logFC.x), fill = Validate)) +
    geom_point(shape=22, size = 4) +
    scale_fill_manual(values = c("1" = "green", "0" = "red")) +
    scale_x_discrete(breaks=c("0"), labels=c("YES/NO")) + 
    theme_hpa() +
    theme(legend.position = "none", plot.margin = margin(2, 0, 2, 0)) +
    labs(y = element_blank(), title = disease) +
    theme(axis.line.y = element_blank(), 
          axis.title.y = element_blank(), 
          axis.text.y = element_blank(), 
          axis.ticks.y = element_blank())
  
  # Remove x-axis and x-axis label for all but the last plot
  if (i < length(disease_vec)) {
    p <- p + theme(axis.line.x = element_blank(),
                   axis.title.x = element_blank(),
                   axis.text.x = element_blank(),
                   axis.ticks.x = element_blank())
  } else {
    p <- p + labs(x = "")
  }
  
  plots[[i]] <- p
}

combined_plot_validate <- wrap_plots(plots, ncol = 1) + 
  plot_annotation(title = 'Validation') &
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))
combined_plot_validate
```

```{r}
# rm(combined_plot_ml)
# rm(combined_plot_igt)
# rm(combined_plot_scapis)
# rm(combined_plot_validate)
# rm(final_plot)
```

```{r, warnings = FALSE}
combined_plot_ml <- wrap_elements(full = combined_plot_ml) +
  plot_annotation(title = "LASSO model trained on IGTM") &
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))

combined_plot_igt <- wrap_elements(full = combined_plot_igt) +
  plot_annotation(title = "IGTM Cohort") &
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))

combined_plot_scapis <- wrap_elements(full = combined_plot_scapis) +
  plot_annotation(title = "SCAPIS Cohort") &
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))

combined_plot_validate <- wrap_elements(full = combined_plot_validate) +
  plot_annotation(title = "Validation") &
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))

# Combine the wrapped plots side-by-side
final_plot <- (combined_plot_igt | combined_plot_scapis | combined_plot_ml | combined_plot_validate) +
  plot_layout(widths = c(3.5, 3, 3, 1))
final_plot
```

## Top protein features boxplots

```{r}
lasso_onlyproteins_features <- readRDS("results/models_results/lasso_onlydeproteins_features_depanel.RData")

disease_palette_boxplot <- c("Obesity" = "#E7662B", 
                             "IGT" = "#836879", 
                             "T2D" = "#321433",
                             "MS" = "#08585A", 
                             "MASLD" = "#FFD321", 
                             "Carotid_plaque" = "#E8A29A", 
                             "CAC" = "#9E0142", 
                             "Sleep_apnea" = "#A6CEE3",
                             "Other Disease" = "grey70",
                             "Healthy" = "grey90")

top_proteins <- lasso_onlyproteins_features |> 
  mutate(Disease_protein = paste(Disease, Variable, sep = "_")) |> 
  filter(Disease_protein != "MS_ACY1") |> 
  select(-Disease_protein) |> 
  group_by(Disease) |>
  arrange(Disease, desc(Scaled_Importance)) |>
  slice_head(n = 3) |> 
  ungroup() |> 
  rename(Protein = Variable)

top_proteins_vec <- top_proteins |> 
  pull(Protein)

plot_data <- data_igt |> 
  select(DAid, all_of(disease_vec), all_of(top_proteins_vec)) |> 
  pivot_longer(cols = -c(DAid, disease_vec), names_to = "Protein", values_to = "Value") |> 
  left_join(top_proteins |> select(Protein, Disease) |> unique(), 
            by = "Protein", 
            relationship = "many-to-many") |> 
  mutate(Disease_Value = case_when(
    Disease == "Obesity" ~ Obesity,
    Disease == "CAC" ~ CAC,
    Disease == "T2D" ~ T2D,
    Disease == "MS" ~ MS,
    Disease == "MASLD" ~ MASLD,
    Disease == "Carotid_plaque" ~ Carotid_plaque,
    Disease == "IGT" ~ IGT,
    TRUE ~ NA_real_
  )) |> 
  mutate(Any_disease = Obesity + CAC + T2D + MS + MASLD + Carotid_plaque + IGT) |> 
  mutate(Disease_Value = case_when(
    Disease_Value == 1 ~ Disease,
    Any_disease == 0 ~ "Healthy",
    Disease_Value == 0 ~ "Other Disease",
    TRUE ~ "Control"  # Default case for NA values
  )) #|> 
  #mutate(Disease_protein = paste(Disease, Protein, sep = "_"))

plot_data |> 
  ggplot(aes(x = factor(Disease_Value, 
                        levels = c("Healthy", 
                                   "Other Disease", 
                                   unique(Disease[!is.na(Disease_Value)]))), 
             y = Value, 
             fill = Disease_Value)) +
  geom_boxplot(position = position_dodge(0.8), outlier.size = 1.5) +
  scale_fill_manual(values = disease_palette_boxplot) +
  facet_wrap(~factor(Protein, top_proteins_vec), scales = "free", nrow = 3) +
  labs(x = element_blank(), y = "NPX") +
  theme_hpa() + 
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1))
```

## Top-feature correlation with clinical metadata

```{r}
metadata_cols <- c("Sex", "Age", "BMI", "Smoke_status", "MAP_Mean", "HbA1c", "HOMA_IR", "Glucose", "Chol", "LDL", "HDL", "TG", "ALT", "GGT", "Urate", "Crea", "eGFR", "CRP", "Hb", "WBC", "PLT")

lasso_onlyproteins_features <- readRDS("results/models_results/lasso_onlydeproteins_features_depanel.RData")

top_proteins <- lasso_onlyproteins_features |> 
  arrange(Disease, desc(Scaled_Importance)) |>
  filter(Scaled_Importance > 50) |>
  rename(Protein = Variable) |> 
  select(Protein) |> 
  unique() |> 
  pull(Protein)

protein_data <- data_igt |> select(all_of(top_proteins))

clinical_data <- metadata |> 
  filter(DAid %in% data_igt$DAid) |>
  arrange(match(DAid, data_igt$DAid)) |> 
  select(all_of(metadata_cols)) |> 
  mutate(Smoke_status = case_when(
    Smoke_status == "NEVER" ~ 0,
    Smoke_status == "EX_SMOKER" ~ 1,
    Smoke_status == "CURRENT" ~ 2,
    TRUE ~ NA_real_
  )) |>
  mutate(Sex = case_when(
    Sex == "F" ~ 0,
    Sex == "M" ~ 1,
    TRUE ~ NA_real_
  ))

correlation_matrix <- cor(protein_data, clinical_data, use = "pairwise.complete.obs", method = "spearman")

row_dendrogram <- hclust(dist(correlation_matrix), method = "ward.D2")
row_order <- row_dendrogram$order

col_dendrogram <- hclust(dist(t(correlation_matrix)), method = "ward.D2")
col_order <- col_dendrogram$order

correlation_matrix <- correlation_matrix[row_order, col_order]

corrplot(correlation_matrix, 
         method = "square",
         is.corr = FALSE,
         tl.srt = 45,
         tl.col = "black",
         col.lim = c(-1, 1)) 
```

## Network with features

```{r}
lasso_onlyproteins_features <- readRDS("results/models_results/lasso_onlydeproteins_features_depanel.RData")

importance_score <- 1

features_per_model <- lasso_onlyproteins_features |> 
  filter(Scaled_Importance > importance_score) |> 
  select(Disease, Variable, Scaled_Importance) |>
  rename(Overall = Scaled_Importance,
         Protein = Variable)

node_pal <-
  c(unique(features_per_model$Protein),unique(features_per_model$Disease)) %>%
  enframe() %>%
  mutate(name = value,
         value = case_when(name %in% disease_vec ~ disease_palette[name],
                           T ~ "grey70")) %>%
  deframe()

# Generate network
set.seed(213)
features_per_model %>% 
  as_tbl_graph() %>% 
  activate(nodes) %>% 
  mutate(s = case_when(name %in% disease_vec ~ 50,
                       T ~ 5),
         text_color = case_when(name %in% disease_vec ~ "white",
                                T ~ "black")) %>%
  create_layout(layout = "nicely") %>% 
  ggraph() + 
  geom_edge_link(aes(), color = "grey90") +
  geom_node_point(aes(color = name, 
                      size = s),
                  show.legend = F)+
  geom_node_point(data = . %>% 
                    filter(name %in% disease_vec) ,
                  aes(color = name,
                      size = s),
                  fill ="grey30",
                  shape = 21,
                  stroke = 3,
                  show.legend = F) +
  scale_color_manual(values = node_pal) +
  geom_node_text(data = . %>% 
                   filter(name %in% disease_vec) ,
                 aes(label = str_wrap(name, width = 10)),
                 color = "white",
                 lineheight = 0.8,
                 size = 1,
                 vjust = 0,
                 hjust = 0.5) +
  geom_node_text(data = . %>% 
                   filter(!name %in% disease_vec) ,
                 aes(label = str_wrap(name, width = 10)),
                 color = "black",
                 lineheight = 0.8,
                 size = 1,
                 repel = TRUE) +
  theme_void() + 
  coord_fixed()
```