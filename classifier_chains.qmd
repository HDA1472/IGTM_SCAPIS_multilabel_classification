---
title: "classifier_chains"
format: html
editor: visual
---

# Set-up

```{r setup, message = FALSE, warning = FALSE, results = 'hide'}
library(HDAnalyzeR)
library(tidyverse)
library(tidymodels)
library(vip)
library(tidyheatmaps)
```

# Import data & metadata

```{r, message = FALSE, results = 'hide'}
data_scapis <- import_df("data/processed_data/scapis_joined_preprocessed.rda")
data_igt <- import_df("data/processed_data/igt_joined_preprocessed.rda")
metadata <- import_df("data/processed_data/metadata_preprocessed.rda")
```

# Import ML functions

```{r}
source("ml_functions.R")
```

# Classifier-chains - clinical + proteomics

```{r}
disease_vec <- c("Obesity", "IGT", "T2D", "MS", "MASLD", "Carotid_plaque", "CAC", "Sleep_apnea")
```

```{r}
disease_palette <- c("Obesity" = "#E7662B", 
                     "IGT" = "#836879", 
                     "T2D" = "#321433",
                     "MS" = "#08585A", 
                     "MASLD" = "#FFD321", 
                     "Carotid_plaque" = "#E8A29A", 
                     "CAC" = "#9E0142", 
                     "Sleep_apnea" = "#A6CEE3")
```

## LASSO

Loop over diseases.

```{r}
ordered_disease_vec <- c("Obesity", "MS", "IGT", "T2D", "MASLD", "CAC", "Carotid_plaque", "Sleep_apnea")

excluded_diseases <- character()

res <- lapply(ordered_disease_vec, function(disease) {
  print(paste(disease, "model:"))
  # Update the excluded diseases list
  excluded_diseases <<- unique(c(excluded_diseases, disease))
  
  # Determine which diseases to exclude in the current iteration
  cols_to_exclude <- ordered_disease_vec |> setdiff(excluded_diseases)
  
  discovery_cohort <- data_igt |>
    select(-all_of(cols_to_exclude))
  
  model_res <- lasso(discovery_cohort, disease, cv_sets = 10, cor_threshold = 0.9, grid_size = 30)
  boxplot <- plot_protein_boxplot(data_igt, disease, model_res$features, points = FALSE)
  return(c(model_res, list("boxplot" = boxplot)))
})

names(res) <- ordered_disease_vec
```

```{r}
saveRDS(res, file="results/models/lasso_chain.RData")
```

```{r}
res_all <- extract_model_res(res, disease_vec)

features <- res_all$features
auc <- res_all$auc

saveRDS(features, file="results/models_results/lasso_chain_features.RData")
saveRDS(auc, file="results/models_results/lasso_chain_auc.RData")
```

# Analysis of model results

## Import model results

```{r}
lasso_chain_features <- readRDS("results/models_results/lasso_chain_features.RData")
lasso_chain_auc <- readRDS("results/models_results/lasso_chain_auc.RData")
```

## Check feature overlap between diseases

Filter \>50% Importance.

```{r}
lasso_chain_features |> 
  select(Variable, Disease, Scaled_Importance, Sign) |>
  rename(Protein = Variable) |> 
  filter(Scaled_Importance >= 50) |> 
  mutate(Importance = if_else(Sign == "POS", round(Scaled_Importance, 2), -round(Scaled_Importance, 2))) |> 
  select(-Sign, -Scaled_Importance) |> 
  pivot_wider(names_from = Disease, values_from = Importance) |>
  mutate(across(everything(), ~ replace_na(., 0))) |> 
  pivot_longer(cols = -Protein, names_to = "Disease", values_to = "Importance") |> 
  left_join(lasso_auc, by = "Disease") |>
  tidyheatmap(
    rows = Disease,
    columns = Protein,
    values = Importance,
    colors = c("darkblue", "white", "red4"),
    annotation_row = c(AUC),
    cluster_rows = TRUE,
    cluster_cols = TRUE,
    legend_breaks = c(-100, -50, 0, 50, 100),
    legend_labels = c("-100", "-50", "0", "50", "100"),
    show_colnames = TRUE,
    clustering_method = "ward.D2")
```

No filter at all.

```{r}
disease_list <- lasso_features |> 
  select(Disease, Variable) |>
  group_by(Disease) |> 
  summarise(Variable = list(Variable)) |> 
  deframe()

feature_names <- names(disease_list)
ordered_colors <- disease_palette[feature_names]
frequencies <- sapply(disease_list, length)
ordered_feature_names <- names(sort(frequencies, decreasing = TRUE))
ordered_colors <- ordered_colors[ordered_feature_names]

upset <- UpSetR::fromList(disease_list)

UpSetR::upset(upset,
              sets = ordered_feature_names,
              order.by = "freq",
              nsets = length(ordered_feature_names),
              sets.bar.color = ordered_colors)
```
