---
title: "binary_models"
format: html
editor: source
---

# Set-up

```{r setup, message = FALSE, warning = FALSE, results = 'hide'}
library(HDAnalyzeR)
library(tidyverse)
library(tidymodels)
library(vip)
library(tidyheatmaps)
library(igraph)
library(ggraph)
library(tidygraph)
library(ggplot2)
library(fmsb)
```

# Import data & metadata

```{r, message = FALSE, results = 'hide'}
data_scapis <- hd_import_data("data/processed_data/scapis_preprocessed.csv")
data_igt <- hd_import_data("data/processed_data/igt_preprocessed.csv")
metadata_scapis <- hd_import_data("data/processed_data/metadata_scapis.csv")
metadata_igt <- hd_import_data("data/processed_data/metadata_igt.csv")

obj_scapis <- hd_initialize(data_scapis, metadata_scapis, is_wide = TRUE)
obj_igt <- hd_initialize(data_igt, metadata_igt, is_wide = TRUE)
```

# Import functions

```{r}
# Function to extract model results: Features & AUC.
extract_model_res <- function(model, diseases) {
  features_all <- lapply(diseases, function(disease) {
    features <- model[[disease]]$features |> mutate(Disease = disease)
  })
  auc_all <- lapply(diseases, function(disease) {
    auc <- model[[disease]]$metrics$auc |> as_tibble() |> rename(AUC = value) |> mutate(Disease = disease)
  })
  return(list("features" = bind_rows(features_all),
              "auc" = bind_rows(auc_all)))
}
```

# Binary models - clinical + proteomics

```{r}
disease_vec <- c("Obesity", "T2D", "MS", "MASLD", "Carotid_plaque", "CAC")
```

```{r}
disease_palette <- c("Obesity" = "#E7662B", 
                     "T2D" = "#321433",
                     "MS" = "#08585A", 
                     "MASLD" = "#FFD321", 
                     "Carotid_plaque" = "#E8A29A", 
                     "CAC" = "#9E0142")
```

## LASSO

Loop over diseases.

```{r}
res <- lapply(disease_vec, function(disease) {
  print(paste(disease, "model:"))
  
  split_obj <- hd_split_data(obj_igt, variable = disease, ratio = 0.8)
  
  model_res <- hd_model_rreg(split_obj, 
                             variable = disease, 
                             case = disease,
                             cv_sets = 10, 
                             mixture = 1,
                             palette = disease_palette,
                             verbose = TRUE)
  
  boxplot <- hd_plot_feature_boxplot(obj_igt, 
                                     variable = disease, 
                                     features = model_res$features |> pull(Feature) |> head(9), 
                                     case = disease,
                                     points = FALSE,
                                     palette = disease_palette)
  
  return(c(model_res, list("boxplot" = boxplot)))
})

names(res) <- disease_vec
```

```{r}
saveRDS(res, file="results/models/lasso_binary.RData")
```

```{r}
res_all <- extract_model_res(res, disease_vec)

features <- res_all$features
auc <- res_all$auc

saveRDS(features, file="results/models_results/lasso_features.RData")
saveRDS(auc, file="results/models_results/lasso_auc.RData")
```

### Validate on SCAPIS

```{r}
lasso_binary <- readRDS("results/models/lasso_binary.RData")
```

```{r}
res <- lapply(disease_vec, function(disease) {
  print(paste(disease, "model:"))
  
  class(lasso_binary[[disease]]) <- "hd_model"
  model_res <- hd_model_test(lasso_binary[[disease]], 
                             obj_igt, 
                             obj_scapis, 
                             variable = disease, 
                             case = disease, 
                             palette = disease_palette)
  
  return(model_res)
})

names(res) <- disease_vec
```

## LASSO - DE preprocessing

Loop over diseases.

```{r}
nfeatures_disease = c("Obesity" = 25, "T2D" = 15, "MS" = 20, "MASLD" = 10, "Carotid_plaque" = 10, "CAC" = 15)

res <- lapply(disease_vec, function(disease) {
  print(paste(disease, "model:"))
  
  split_obj <- hd_split_data(obj_igt, variable = disease, ratio = 0.8)
  
  daids <- split_obj$train_data |> pull(DAid)
  
  obj_med <- hd_initialize(data_igt |> filter(DAid %in% daids), metadata_igt, is_wide = TRUE)
  
  de_results <- hd_de_limma(obj_med, variable = disease, case = disease)
  selected_features <- de_results$de_res |> 
    filter(adj.P.Val < 0.05) |> 
    arrange(desc(logFC)) |> 
    pull(Feature) |> 
    head(nfeatures_disease[[disease]])
  
  split_obj[["train_data"]] <- split_obj[["train_data"]] |> 
    select(DAid, all_of(c(disease, selected_features)))
  split_obj[["test_data"]] <- split_obj[["test_data"]] |> 
    select(DAid, all_of(c(disease, selected_features)))
  
  model_res <- hd_model_rreg(split_obj, 
                             variable = disease, 
                             case = disease,
                             cv_sets = 10, 
                             mixture = 1,
                             palette = disease_palette,
                             plot_y_labels = TRUE,
                             verbose = TRUE)
  
  boxplot <- hd_plot_feature_boxplot(obj_igt, 
                                     variable = disease, 
                                     features = model_res$features |> pull(Feature) |> head(9), 
                                     case = disease,
                                     points = FALSE,
                                     palette = disease_palette)
  
  return(c(model_res, list("boxplot" = boxplot, "de_features" = selected_features)))
})

names(res) <- disease_vec
```

```{r}
saveRDS(res, file="results/models/lasso_binary_de.RData")
```

```{r}
res_all <- extract_model_res(res, disease_vec)

features <- res_all$features
auc <- res_all$auc

saveRDS(features, file="results/models_results/lasso_features_de.RData")
saveRDS(auc, file="results/models_results/lasso_auc_de.RData")
```

### Validate on SCAPIS

```{r}
lasso_binary_de <- readRDS("results/models/lasso_binary_de.RData")
```

```{r}
res <- lapply(disease_vec, function(disease) {
  print(paste(disease, "model:"))
  
  obj_igt_med <- obj_igt
  obj_igt_med[["data"]] <- obj_igt_med[["data"]] |> 
    select(DAid, all_of(lasso_binary_de[[disease]]$de_features))
  obj_scapis_med <- obj_scapis
  obj_scapis_med[["data"]] <- obj_scapis_med[["data"]] |> 
    select(DAid, all_of(lasso_binary_de[[disease]]$de_features))
  
  class(lasso_binary_de[[disease]]) <- "hd_model"
  model_res <- hd_model_test(lasso_binary_de[[disease]], 
                             obj_igt_med, 
                             obj_scapis_med, 
                             variable = disease, 
                             case = disease, 
                             palette = disease_palette)
  
  return(model_res)
})

names(res) <- disease_vec
```

```{r}
saveRDS(res, file="results/models/lasso_binary_de_validated.RData")

auc_all <- lapply(disease_vec, function(disease) {
    auc <- res[[disease]]$test_metrics$auc |> as_tibble() |> rename(AUC = value) |> mutate(Disease = disease)
  })

auc_all <- bind_rows(auc_all)
saveRDS(auc_all, file="results/models_results/lasso_auc_de_validated.RData")
```

# Analysis of model results

## Import model results

```{r}
lasso_features <- readRDS("results/models_results/lasso_features.RData")
lasso_auc <- readRDS("results/models_results/lasso_auc.RData")
lasso_features_de <- readRDS("results/models_results/lasso_features_de.RData")
lasso_auc_de <- readRDS("results/models_results/lasso_auc_de.RData")
lasso_auc_test <- readRDS("results/models_results/lasso_auc_validated.RData")
lasso_auc_de_test <- readRDS("results/models_results/lasso_auc_de_validated.RData")
```

## Top proteins boxplots

```{r}
disease_palette_boxplot <- c("Obesity" = "#E7662B",
                             "T2D" = "#321433",
                             "MS" = "#08585A", 
                             "MASLD" = "#FFD321", 
                             "Carotid_plaque" = "#E8A29A", 
                             "CAC" = "#9E0142",
                             "Control" = "lightgrey")

top_proteins <- lasso_features_de |> 
  group_by(Disease) |>
  arrange(Disease, desc(Scaled_Importance)) |>
  slice_head(n = 3) |> 
  ungroup() |> 
  filter(Scaled_Importance > 0.5) |> 
  rename(Protein = Feature)

top_proteins_vec <- top_proteins |> 
  pull(Protein) |> 
  unique()

plot_data <- data_igt |> 
  left_join(metadata_igt |> select(DAid, all_of(disease_vec)), by = "DAid") |>
  select(DAid, all_of(disease_vec), all_of(top_proteins_vec)) |> 
  mutate(across(all_of(c("Obesity", "MS", "MASLD", "CAC", "Carotid_plaque", "T2D")), ~ ifelse(. == "0", 0, 1))) |>
  pivot_longer(cols = -c("DAid", disease_vec), names_to = "Protein", values_to = "Value") |> 
  left_join(top_proteins |> select(Protein, Disease), by = "Protein") |> 
  mutate(Disease_Value = case_when(
    Disease == "Obesity" ~ Obesity,
    Disease == "CAC" ~ CAC,
    Disease == "T2D" ~ T2D,
    Disease == "MS" ~ MS,
    Disease == "MASLD" ~ MASLD,
    Disease == "Carotid_plaque" ~ Carotid_plaque,
    TRUE ~ NA_real_
  )) |> 
  mutate(Any_disease = Obesity + CAC + T2D + MS + MASLD + Carotid_plaque) |> 
  mutate(Disease_Value = case_when(
    Disease_Value == 1 ~ Disease,
    Any_disease == 0 ~ "Healthy",
    Disease_Value == 0 ~ "Other Disease",
    TRUE ~ "Control"  # Default case for NA values
  )) |> 
  mutate(Disease_protein = paste(Disease, Protein, sep = "_"))

boxplots <- plot_data |> 
  ggplot(aes(x = factor(Disease_Value, 
                        levels = c("Healthy", 
                                   "Other Disease", 
                                   unique(Disease[!is.na(Disease_Value)]))), 
             y = Value, 
             fill = Disease_Value)) +
  geom_boxplot(position = position_dodge(0.8), outlier.size = 1.5) +
  scale_fill_manual(values = disease_palette_boxplot) +
  facet_wrap(~Disease_protein, scales = "free", nrow = 3) +
  labs(x = "", y = "") +
  theme_hd() + 
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
```

## Proteomics - discovery vs validation

```{r}
auc_all <- bind_rows(lasso_auc_de |> mutate(Set = "Discovery - IGTM"), 
                     lasso_auc_de_test |> mutate(Set = "Validation - SCAPIS"))

mean_auc <- auc_all |>
  group_by(Disease) |>
  summarise(mean_AUC = mean(AUC)) |>
  ungroup()

auc_all |>
  left_join(mean_auc, by = "Disease") |>
  ggplot(aes(x = reorder(Disease, -mean_AUC), y = AUC, fill = Set)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_text(aes(label = round(AUC, 2)), position = position_dodge(width = 1), vjust = -0.5) +
  scale_fill_manual(values = c("Discovery - IGTM" = "#FA9F99", "Validation - SCAPIS" = "#4DD2D6")) +
  labs(y = "AUC", x = element_blank()) +
  theme_hd() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
```

## Check feature overlap between diseases

Filter \>50% Importance.

```{r}
lasso_features_de |> 
  select(Feature, Disease, Scaled_Importance, Sign) |>
  rename(Protein = Feature) |> 
  filter(Scaled_Importance >= 0.5) |> 
  mutate(Importance = if_else(Sign == "POS", round(Scaled_Importance, 2), -round(Scaled_Importance, 2))) |> 
  select(-Sign, -Scaled_Importance) |> 
  pivot_wider(names_from = Disease, values_from = Importance) |>
  mutate(across(everything(), ~ replace_na(., 0))) |> 
  pivot_longer(cols = -Protein, names_to = "Disease", values_to = "Importance") |> 
  left_join(lasso_auc, by = "Disease") |>
  tidyheatmap(
    rows = Disease,
    columns = Protein,
    values = Importance,
    colors = c("darkblue", "white", "red4"),
    annotation_row = c(AUC),
    cluster_rows = TRUE,
    cluster_cols = TRUE,
    legend_breaks = c(-100, -50, 0, 50, 100),
    legend_labels = c("-100", "-50", "0", "50", "100"),
    show_colnames = TRUE,
    clustering_method = "ward.D2")
```

No filter at all.

```{r}
disease_list <- lasso_features_de |> 
  select(Disease, Feature) |>
  group_by(Disease) |> 
  summarise(Feature = list(Feature)) |> 
  deframe()

feature_names <- names(disease_list)
ordered_colors <- disease_palette[feature_names]
frequencies <- sapply(disease_list, length)
ordered_feature_names <- names(sort(frequencies, decreasing = TRUE))
ordered_colors <- ordered_colors[ordered_feature_names]

upset <- UpSetR::fromList(disease_list)

UpSetR::upset(upset,
              sets = ordered_feature_names,
              order.by = "freq",
              nsets = length(ordered_feature_names),
              sets.bar.color = ordered_colors)
```

## Model feature network

```{r}
network_plot <- hd_plot_feature_network(
  lasso_features_de |> filter(Scaled_Importance >= 0) |> rename(Class = Disease),
  plot_color = "Scaled_Importance",
  class_palette = disease_palette
)
```

## DE feature selection analysis

```{r}
lasso_de_all <- list()

for (num in c(5, 10, 15, 20, 25, 30, 35, 40, 45, 50)) {
  
  file_name_auc <- "results/models_results/lasso_onlydeproteins_auc_"
  file_name_auc <- paste0(file_name_auc, num, ".RData")
  file_name_feature <- "results/models_results/lasso_onlydeproteins_features_"
  file_name_feature <- paste0(file_name_feature, num, ".RData")
  
  lasso_de_auc <- readRDS(file_name_auc)
  lasso_de_features <- readRDS(file_name_feature) |> 
    group_by(Disease) |>
    summarise(n = n()) |> 
    ungroup()
  
  lasso_de <- lasso_de_auc |> 
    left_join(lasso_de_features, by = "Disease")
  
  lasso_de_all <- append(lasso_de_all, list(lasso_de))
  
}

lasso_de_all <- bind_rows(lasso_de_all)
```

```{r}
lasso_auc <- readRDS("results/models_results/lasso_onlyproteins_auc.RData")

lasso_de_all |> 
  ggplot(aes(x = n, y = AUC, color = Disease)) +
  geom_line() +
  geom_point() +
  geom_hline(data = lasso_auc, aes(yintercept = AUC), linetype = "dashed") +
  scale_color_manual(values = disease_palette) +
  labs(x = "Number of selected features", y = "AUC") +
  facet_wrap(~Disease) +
  theme_hd()
```

# Pathway Enrichment - ORA

```{r}
disease_vec_enrichment <- c("Obesity", "T2D", "MS", "MASLD")

enrichment_res <- lapply(disease_vec_enrichment, function(disease) {
  
  print(paste(disease, "enrichment:"))
        
  features <- lasso_features_de |> 
    filter(Disease == disease) |>
    pull(Feature)
  
  enrichment_obj <- hd_ora(features, database = "GO", ontology = "BP")
  plots <- hd_plot_ora(enrichment_obj)
  
})

names(enrichment_res) <- disease_vec_enrichment
```

# Radar plots

```{r}
features <- lasso_features_de |> 
  filter(Disease %in% c("MASLD", "MS", "CAC")) |>
  group_by(Disease) |> 
  arrange(Disease, desc(Scaled_Importance)) |>
  slice_head(n = 5)

feature_vec <- features |> 
  pull(Feature) |> 
  unique()
```

```{r}
disease_palette_boxplot <- c("Obesity" = "#E7662B",
                             "T2D" = "#321433",
                             "MS" = "#08585A", 
                             "MASLD" = "#FFD321", 
                             "Carotid_plaque" = "#E8A29A", 
                             "CAC" = "#9E0142",
                             "Other Disease" = "grey70",
                             "Healthy" = "grey90")


radar_data <- data_igt |> 
  left_join(metadata_igt |> select(DAid, all_of(disease_vec)), by = "DAid") |>
  select(DAid, all_of(disease_vec), all_of(feature_vec))

radar_data <- radar_data %>%
  mutate(Disease_Summary = apply(select(., Obesity, T2D, MS, MASLD, Carotid_plaque, CAC),
                                 1, 
                                 function(row) paste(row[row != "0"], collapse = "_"))) |> 
  mutate(Disease_Summary = ifelse(Disease_Summary == "", "None", Disease_Summary)) |> 
  relocate(Disease_Summary, .after = DAid) |> 
  select(-all_of(disease_vec)) |>
  pivot_longer(cols = -c(DAid, Disease_Summary), names_to = "Feature", values_to = "Value") |> 
  group_by(Disease_Summary, Feature) |>
  summarise(Value = mean(Value), .groups = "drop")
```

c("Obesity" = "#E7662B", 
  "T2D" = "#321433",
  "MS" = "#08585A", 
  "MASLD" = "#FFD321", 
  "Carotid_plaque" = "#E8A29A", 
  "CAC" = "#9E0142")
          
```{r}
interest_groups <- c("MASLD", "CAC", "MS_CAC", "MS", "MS_MASLD", "None")
palette_groups <- c("MASLD" = "#FFD321", 
                    "CAC" = "#9E0142",
                    "MS_CAC" = "#532D4E",
                    "MS" = "#08585A",
                    "MS_MASLD" = "#84963E",
                    "None" = "grey90")

radar_dat <- radar_data |>
  filter(Disease_Summary %in% interest_groups) |>
  pivot_wider(names_from = Feature, values_from = Value) |>
  column_to_rownames(var = "Disease_Summary")

# min_row <- radar_dat |> summarise(across(everything(), min))
# max_row <- radar_dat |> summarise(across(everything(), max))
overall_min <- min(as.matrix(radar_dat), na.rm = TRUE)
overall_max <- max(as.matrix(radar_dat), na.rm = TRUE)
min_row <- as.data.frame(matrix(overall_min, nrow = 1, ncol = ncol(radar_dat)))
max_row <- as.data.frame(matrix(overall_max, nrow = 1, ncol = ncol(radar_dat)))
colnames(min_row) <- colnames(radar_dat)
colnames(max_row) <- colnames(radar_dat)

radar_dat <- bind_rows(max_row, min_row, radar_dat)
rownames(radar_dat)[1:2] <- c("1", "2")
radar_dat <- radar_dat |> slice(match(c("1", "2", c("MASLD", "CAC", "MS_CAC", "MS", "MS_MASLD", "None")), rownames(radar_dat)))
color_order <- palette_groups[c("MASLD", "CAC", "MS_CAC", "MS", "MS_MASLD", "None")]
colors_alpha <- sapply(color_order, alpha, alpha = 0.5)

plot_filename <- paste0("results/plots/radar_plot_", "MASLD_others", ".pdf")
pdf(plot_filename, width = 6, height = 6)
radarchart(radar_dat,
           axistype=1,
           pcol=color_order,
           #pfcol=colors_alpha,
           plwd=4,
           plty=1,
           cglcol="grey",
           cglty=1,
           axislabcol="white",
           caxislabels=seq(overall_min, overall_max, 0.5),
           cglwd=0.8,
           vlcex=0.8)

dev.off()
```