---
title: "binary_models"
format: html
editor: source
---

# Set-up

```{r setup, message = FALSE, warning = FALSE, results = 'hide'}
library(HDAnalyzeR)
library(tidyverse)
library(tidymodels)
library(vip)
library(tidyheatmaps)
library(igraph)
library(ggraph)
library(tidygraph)
library(ggplot2)
```

# Import data & metadata

```{r, message = FALSE, results = 'hide'}
data_scapis <- import_df("data/processed_data/scapis_joined_preprocessed.rda")
data_igt <- import_df("data/processed_data/igt_joined_preprocessed.rda")
metadata <- import_df("data/processed_data/metadata_preprocessed.rda")
```

# Import ML functions

```{r}
source("ml_functions.R")
```

# Binary models - clinical + proteomics

```{r}
disease_vec <- c("Obesity", "IGT", "T2D", "MS", "MASLD", "Carotid_plaque", "CAC")
```

```{r}
disease_palette <- c("Obesity" = "#A6CEE3", 
                     "IGT" = "#836879", 
                     "T2D" = "#321433",
                     "MS" = "#08585A", 
                     "MASLD" = "#FFD321", 
                     "Carotid_plaque" = "#E8A29A", 
                     "CAC" = "#9E0142")
```

## LASSO

Loop over diseases.

```{r}
res <- lapply(disease_vec, function(disease) {
  print(paste(disease, "model:"))
  cols_to_exclude <- disease_vec |> setdiff(disease)
  
  discovery_cohort <- data_igt |>
    select(-all_of(cols_to_exclude))

  model_res <- lasso(discovery_cohort, disease, cv_sets = 10, cor_threshold = 0.9, grid_size = 30)
  boxplot <- plot_protein_boxplot(data_igt, disease, model_res$features, points = FALSE)
  return(c(model_res, list("boxplot" = boxplot)))
})

names(res) <- disease_vec
```

```{r}
saveRDS(res, file="results/models/lasso_binary.RData")
```

```{r}
res_all <- extract_model_res(res, disease_vec)

features <- res_all$features
auc <- res_all$auc

saveRDS(features, file="results/models_results/lasso_features.RData")
saveRDS(auc, file="results/models_results/lasso_auc.RData")
```

## Elastic Net

Loop over diseases.

```{r}
res <- lapply(disease_vec, function(disease) {
  print(paste(disease, "model:"))
  cols_to_exclude <- disease_vec |> setdiff(disease)
  
  discovery_cohort <- data_igt |>
    select(-all_of(cols_to_exclude))

  model_res <- elasticnet(discovery_cohort, disease, cv_sets = 10, cor_threshold = 0.9, grid_size = 50)
  boxplot <- plot_protein_boxplot(data_igt, disease, model_res$features, points = FALSE)
  return(c(model_res, list("boxplot" = boxplot)))
})

names(res) <- disease_vec
```

```{r}
saveRDS(res, file="results/models/elasticnet_binary.RData")
```

```{r}
res_all <- extract_model_res(res, disease_vec)

features <- res_all$features
auc <- res_all$auc

saveRDS(features, file="results/models_results/elasticnet_features.RData")
saveRDS(auc, file="results/models_results/elasticnet_auc.RData")
```

## Random Forest

Loop over diseases.

```{r}
res <- lapply(disease_vec, function(disease) {
  print(paste(disease, "model:"))
  cols_to_exclude <- disease_vec |> setdiff(disease)
  
  discovery_cohort <- data_igt |>
    select(-all_of(cols_to_exclude))

  model_res <- rf(discovery_cohort, disease, cv_sets = 5, cor_threshold = 0.9, grid_size = 60)
  boxplot <- plot_protein_boxplot(data_igt, disease, model_res$features, points = FALSE)
  return(c(model_res, list("boxplot" = boxplot)))
})

names(res) <- disease_vec
```

```{r}
saveRDS(res, file="results/models/rf_binary_1.RData")
```

```{r}
res_all <- extract_model_res(res, disease_vec)

features <- res_all$features
auc <- res_all$auc

saveRDS(features, file="results/models_results/rf_features.RData")
saveRDS(auc, file="results/models_results/rf_auc.RData")
```

# Binary models - only proteomics

```{r}
metadata_cols <- c("Sex", "Age", "Smoke_status", "MAP_Mean", "HbA1c", "Chol", "LDL", "HDL", "TG", "ALT", "GGT", "Urate", "Crea", "eGFR", "CRP", "Hb", "WBC", "PLT")
```

## LASSO

Loop over diseases.

```{r}
res <- lapply(disease_vec, function(disease) {
  print(paste(disease, "model:"))
  cols_to_exclude <- disease_vec |> setdiff(disease)
  
  discovery_cohort <- data_igt |>
    select(-all_of(cols_to_exclude)) |> 
    select(-any_of(metadata_cols))

  model_res <- lasso(discovery_cohort, disease, cv_sets = 10, cor_threshold = 0.9, grid_size = 30)
  boxplot <- plot_protein_boxplot(data_igt, disease, model_res$features, points = FALSE)
  return(c(model_res, list("boxplot" = boxplot)))
})

names(res) <- disease_vec
```

```{r}
saveRDS(res, file="results/models/lasso_binary_onlyproteins.RData")
```


```{r}
res_all <- extract_model_res(res, disease_vec)

features <- res_all$features
auc <- res_all$auc

saveRDS(features, file="results/models_results/lasso_onlyproteins_features.RData")
saveRDS(auc, file="results/models_results/lasso_onlyproteins_auc.RData")
```

# Binary models - only clinical

```{r}
metadata_cols <- c("Sex", "Age", "Smoke_status", "MAP_Mean", "HbA1c", "Chol", "LDL", "HDL", "TG", "ALT", "GGT", "Urate", "Crea", "eGFR", "CRP", "Hb", "WBC", "PLT")
```

## LASSO

Loop over diseases.

```{r}
res <- lapply(disease_vec, function(disease) {
  print(paste(disease, "model:"))
  
  discovery_cohort <- data_igt |>
    select(DAid, all_of(c(disease, metadata_cols)))

  model_res <- lasso(discovery_cohort, disease, cv_sets = 10, cor_threshold = 0.9, grid_size = 30)
  boxplot <- plot_protein_boxplot(data_igt, disease, model_res$features, points = FALSE)
  return(c(model_res, list("boxplot" = boxplot)))
})

names(res) <- disease_vec
```

```{r}
saveRDS(res, file="results/models/lasso_binary_onlyclinical.RData")
```

```{r}
res_all <- extract_model_res(res, disease_vec)

features <- res_all$features
auc <- res_all$auc

saveRDS(features, file="results/models_results/lasso_onlyclinical_features.RData")
saveRDS(auc, file="results/models_results/lasso_onlyclinical_auc.RData")
```

# Binary models - diseases + clinical + proteomics

## LASSO

Loop over diseases.

```{r}
res <- lapply(disease_vec, function(disease) {
  print(paste(disease, "model:"))

  model_res <- lasso(data_igt, disease, cv_sets = 10, cor_threshold = 0.9, grid_size = 30, binary_cols = disease_vec)
  boxplot <- plot_protein_boxplot(data_igt, disease, model_res$features, points = FALSE)
  return(c(model_res, list("boxplot" = boxplot)))
})

names(res) <- disease_vec
```

```{r}
saveRDS(res, file="results/models/lasso_binary_diseases.RData")
```

```{r}
res_all <- extract_model_res(res, disease_vec)

features <- res_all$features
auc <- res_all$auc

saveRDS(features, file="results/models_results/lasso_diseases_features.RData")
saveRDS(auc, file="results/models_results/lasso_diseases_auc.RData")
```

# Binary models - diseases + proteomics

```{r}
metadata_cols <- c("Sex", "Age", "Smoke_status", "MAP_Mean", "HbA1c", "Chol", "LDL", "HDL", "TG", "ALT", "GGT", "Urate", "Crea", "eGFR", "CRP", "Hb", "WBC", "PLT")
```

## LASSO

Loop over diseases.

```{r}
res <- lapply(disease_vec, function(disease) {
  print(paste(disease, "model:"))

  model_res <- lasso(data_igt |> select(-any_of(metadata_cols)), disease, cv_sets = 10, cor_threshold = 0.9, grid_size = 30, binary_cols = disease_vec)
  boxplot <- plot_protein_boxplot(data_igt, disease, model_res$features, points = FALSE)
  return(c(model_res, list("boxplot" = boxplot)))
})

names(res) <- disease_vec
```

```{r}
saveRDS(res, file="results/models/lasso_binary_diseases_onlyproteins.RData")
```

```{r}
res_all <- extract_model_res(res, disease_vec)

features <- res_all$features
auc <- res_all$auc

saveRDS(features, file="results/models_results/lasso_diseases_onlyproteins_features.RData")
saveRDS(auc, file="results/models_results/lasso_diseases_onlyproteins_auc.RData")
```

# Analysis of model results

## Import model results

```{r}
lasso_features <- readRDS("results/models_results/lasso_features.RData")
lasso_auc <- readRDS("results/models_results/lasso_auc.RData")
lasso_onlyproteins_features <- readRDS("results/models_results/lasso_onlyproteins_features.RData")
lasso_onlyproteins_auc <- readRDS("results/models_results/lasso_onlyproteins_auc.RData")
lasso_onlyclinical_features <- readRDS("results/models_results/lasso_onlyclinical_features.RData")
lasso_onlyclinical_auc <- readRDS("results/models_results/lasso_onlyclinical_auc.RData")
lasso_diseases_features <- readRDS("results/models_results/lasso_diseases_features.RData")
lasso_diseases_onlyproteins_features <- readRDS("results/models_results/lasso_diseases_onlyproteins_features.RData")
```

## Proteomics + clinical vs. only proteomics + clinical

We see that the results generally do not change a lot. For T2D, IGT, and MS the AUC is significantly lower and the number of features is higher when using only proteomics, especially the top features (>50% Importance).

Number of features

```{r}
lasso_features |> 
  select(Disease, Variable) |> 
  group_by(Disease) |> 
  summarise(nFeatures = n_distinct(Variable)) |> 
  mutate(Predictors = "Combined") |>
  bind_rows(lasso_onlyproteins_features |> 
              select(Disease, Variable) |> 
              group_by(Disease) |> 
              summarise(nFeatures = n_distinct(Variable)) |> 
              mutate(Predictors = "Only proteins")) |> 
  ggplot(aes(x = Disease, y = nFeatures, fill = Predictors)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_text(aes(label = round(nFeatures, 2)), position = position_dodge(width = 1), vjust = -0.5) +
  scale_fill_manual(values = c("Combined" = "darkblue", "Only proteins" = "red4")) +
  labs(y = "Number of features") +
  theme_hpa() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

Number of top features

```{r}
lasso_features |> 
  filter(Scaled_Importance >= 50) |>
  select(Disease, Variable) |> 
  group_by(Disease) |> 
  summarise(nFeatures = n_distinct(Variable)) |> 
  mutate(Predictors = "Combined") |>
  bind_rows(lasso_onlyproteins_features |> 
              filter(Scaled_Importance >= 50) |>
              select(Disease, Variable) |> 
              group_by(Disease) |> 
              summarise(nFeatures = n_distinct(Variable)) |> 
              mutate(Predictors = "Only proteins")) |> 
  ggplot(aes(x = Disease, y = nFeatures, fill = Predictors)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_text(aes(label = round(nFeatures, 2)), position = position_dodge(width = 1), vjust = -0.5) +
  scale_fill_manual(values = c("Combined" = "darkblue", "Only proteins" = "red4")) +
  labs(y = "Number of features") +
  theme_hpa() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

AUC

```{r}
lasso_auc |> 
  select(Disease, AUC) |> 
  mutate(Predictors = "Combined") |> 
  bind_rows(lasso_onlyproteins_auc |> select(Disease, AUC) |> mutate(Predictors = "Only proteins"),
            lasso_onlyclinical_auc |> select(Disease, AUC) |> mutate(Predictors = "Only clinical")) |> 
  ggplot(aes(x = Disease, y = AUC, fill = Predictors)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_text(aes(label = round(AUC, 2)), position = position_dodge(width = 1), vjust = -0.5) +
  scale_fill_manual(values = c("Combined" = "darkblue", "Only proteins" = "red4", "Only clinical" = "green4")) +
  labs(y = "AUC") +
  theme_hpa() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Check feature overlap between diseases

### Clinical + proteomics

Filter \>50% Importance.

```{r}
lasso_features |> 
  select(Variable, Disease, Scaled_Importance, Sign) |>
  rename(Protein = Variable) |> 
  filter(Scaled_Importance >= 50) |> 
  mutate(Importance = if_else(Sign == "POS", round(Scaled_Importance, 2), -round(Scaled_Importance, 2))) |> 
  select(-Sign, -Scaled_Importance) |> 
  pivot_wider(names_from = Disease, values_from = Importance) |>
  mutate(across(everything(), ~ replace_na(., 0))) |> 
  pivot_longer(cols = -Protein, names_to = "Disease", values_to = "Importance") |> 
  left_join(lasso_auc, by = "Disease") |>
  tidyheatmap(
    rows = Disease,
    columns = Protein,
    values = Importance,
    colors = c("darkblue", "white", "red4"),
    annotation_row = c(AUC),
    cluster_rows = TRUE,
    cluster_cols = TRUE,
    legend_breaks = c(-100, -50, 0, 50, 100),
    legend_labels = c("-100", "-50", "0", "50", "100"),
    show_colnames = TRUE,
    clustering_method = "ward.D2")
```

No filter at all.

```{r}
disease_list <- lasso_features |> 
  select(Disease, Variable) |>
  group_by(Disease) |> 
  summarise(Variable = list(Variable)) |> 
  deframe()

feature_names <- names(disease_list)
ordered_colors <- disease_palette[feature_names]
frequencies <- sapply(disease_list, length)
ordered_feature_names <- names(sort(frequencies, decreasing = TRUE))
ordered_colors <- ordered_colors[ordered_feature_names]

upset <- UpSetR::fromList(disease_list)

UpSetR::upset(upset,
              sets = ordered_feature_names,
              order.by = "freq",
              nsets = length(ordered_feature_names),
              sets.bar.color = ordered_colors)
```

### Only proteomics

Filter \>50% Importance.

```{r}
lasso_onlyproteins_features |> 
  select(Variable, Disease, Scaled_Importance, Sign) |>
  rename(Protein = Variable) |> 
  filter(Scaled_Importance >= 50) |> 
  mutate(Importance = if_else(Sign == "POS", round(Scaled_Importance, 2), -round(Scaled_Importance, 2))) |> 
  select(-Sign, -Scaled_Importance) |> 
  pivot_wider(names_from = Disease, values_from = Importance) |>
  mutate(across(everything(), ~ replace_na(., 0))) |> 
  pivot_longer(cols = -Protein, names_to = "Disease", values_to = "Importance") |> 
  left_join(lasso_auc, by = "Disease") |>
  tidyheatmap(
    rows = Disease,
    columns = Protein,
    values = Importance,
    colors = c("darkblue", "white", "red4"),
    annotation_row = c(AUC),
    cluster_rows = TRUE,
    cluster_cols = TRUE,
    legend_breaks = c(-100, -50, 0, 50, 100),
    legend_labels = c("-100", "-50", "0", "50", "100"),
    show_colnames = TRUE,
    clustering_method = "ward.D2")
```

### Only clinical

No filter at all.

```{r}
lasso_onlyclinical_features |> 
  select(Variable, Disease, Scaled_Importance, Sign) |>
  rename(Protein = Variable) |> 
  mutate(Importance = if_else(Sign == "POS", round(Scaled_Importance, 2), -round(Scaled_Importance, 2))) |> 
  select(-Sign, -Scaled_Importance) |> 
  pivot_wider(names_from = Disease, values_from = Importance) |>
  mutate(across(everything(), ~ replace_na(., 0))) |> 
  pivot_longer(cols = -Protein, names_to = "Disease", values_to = "Importance") |> 
  left_join(lasso_auc, by = "Disease") |>
  tidyheatmap(
    rows = Disease,
    columns = Protein,
    values = Importance,
    colors = c("darkblue", "white", "red4"),
    annotation_row = c(AUC),
    cluster_rows = TRUE,
    cluster_cols = TRUE,
    legend_breaks = c(-100, -50, 0, 50, 100),
    legend_labels = c("-100", "-50", "0", "50", "100"),
    show_colnames = TRUE,
    clustering_method = "ward.D2")
```

## Model feature network

```{r}
importance_score <- 50

features_per_model <- lasso_diseases_onlyproteins_features |> 
  filter(Scaled_Importance >= importance_score) |>
  group_by(Disease) |> 
  summarise(Features = list(unique(Variable))) |> 
  deframe()

shared_features_matrix <- combn(names(features_per_model), 2, function(models) {
  model1 <- models[1]
  model2 <- models[2]
  
  # Count of shared features between each pair of models
  shared_features <- length(intersect(features_per_model[[model1]], features_per_model[[model2]]))
  
  # Determine edge color
  bidirectional <- model2 %in% features_per_model[[model1]] && model1 %in% features_per_model[[model2]]
  unidirectional <- model2 %in% features_per_model[[model1]] || model1 %in% features_per_model[[model2]]
  
  edge_color <- if (bidirectional) "#4682B4" else if (unidirectional) "#DB7093" else "lightgrey"
  
  # Return a named list
  list(Model1 = model1, Model2 = model2, SharedFeatures = shared_features, EdgeColor = edge_color)
}, simplify = FALSE)

# Convert the list of lists to a data frame
shared_features_df <- map_dfr(shared_features_matrix, ~ as_tibble(.))

# Convert SharedFeatures column to numeric
shared_features_matrix$SharedFeatures <- as.numeric(shared_features_matrix$SharedFeatures)

node_sizes <- lasso_diseases_onlyproteins_features |> 
  filter(Scaled_Importance >= importance_score) |>
  group_by(Disease) |> 
  summarise(TotalFeatures = n())
```

```{r}
set.seed(126)

# Create an igraph object
graph <- graph_from_data_frame(shared_features_df, vertices = node_sizes, directed = FALSE)
graph <- as_tbl_graph(graph) |> 
  activate(edges) |> 
  filter(SharedFeatures > 0)

# Map node sizes to the number of total features, and edge widths to shared features
ggraph(graph, layout = "fr") +
  geom_edge_link(aes(width = SharedFeatures, color = EdgeColor), show.legend = TRUE) +
  geom_node_point(aes(size = TotalFeatures, color = name)) +
  scale_edge_color_identity() +
  scale_edge_width_continuous(range = c(0.5, 4)) +
  scale_size_continuous(range = c(4, 10)) +
  scale_color_manual(values = disease_palette) +
  theme_void() +
  theme(
    panel.grid = element_blank(),
    axis.line = element_blank(),
    axis.ticks = element_blank(),
    axis.text = element_blank()
  ) +
  labs(title = "Feature Sharing Among Models (LASSO >0% Importance)",
       subtitle = "Node size ~ important features, Edge thickness ~ shared features") +
  guides(size = guide_legend(title = "Total Features"),
         edge_width = guide_legend(title = "Shared Features"),
         color = guide_legend(title = "Disease"))

```

