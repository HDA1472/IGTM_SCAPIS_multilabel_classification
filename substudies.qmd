---
title: "class_substudies"
format: html
editor: source
---

# Set-up

```{r setup, message = FALSE, warning = FALSE, results = 'hide'}
library(HDAnalyzeR)
library(tidyverse)
library(tidymodels)
library(vip)
library(multiROC)
library(RColorBrewer)
library(VennDiagram)
```

# Import data & metadata

```{r, message = FALSE, results = 'hide'}
data_scapis <- import_df("data/processed_data/scapis_joined_preprocessed.rda")
data_igt <- import_df("data/processed_data/igt_joined_preprocessed.rda")
metadata <- import_df("data/processed_data/metadata_preprocessed.rda")
```

# Import ML functions

```{r}
source("ml_functions.R")
```

# Glucose Groups

## LASSO multi-class

```{r}
glucosegroup_palette <- c("NGT_lowFINDRISC" = "#ffdddd",
                          "NGT_highFINDRISC" = "#d6cace",
                          "IFG" = "#ac98a2",
                          "IGT" = "#836879", 
                          "CGI" = "#5a3c54",
                          "T2D_new" = "#321433")
```

```{r}
glucose_discovery <- data_igt |> 
  left_join(metadata |> select(DAid, glucose.group), by = "DAid") |>
  select(-all_of(c("Obesity", "IGT", "T2D", "MS", "MASLD", "Carotid_plaque", "CAC", "Sleep_apnea"))) |> 
  relocate(glucose.group, .after = DAid)
```

```{r}
glucose_discovery |> 
  group_by(glucose.group) |> 
  summarise(n = n())
```

```{r}
res <- lasso_multi(glucose_discovery, "glucose.group", cv_sets = 10, cor_threshold = 0.9, grid_size = 30)
```

```{r}
saveRDS(res, file="results/models/lasso_glucosegroups_multiclass.RData")
```

## Visualize model results

```{r}
glucosemodel <- readRDS("results/models/lasso_glucosegroups_multiclass.RData")
```

Confusion matrix visualization.

```{r}
cm_table <- as.data.frame(as.table(glucosemodel$confusion_matrix$table))
colnames(cm_table) <- c("Predicted", "Actual", "Freq")
cm_table |> 
  mutate(Predicted = factor(Predicted, levels = c("NGT_lowFINDRISC", "NGT_highFINDRISC", "IFG", "IGT", "CGI", "T2D_new")),
         Actual = factor(Actual, levels = c("NGT_lowFINDRISC", "NGT_highFINDRISC", "IFG", "IGT", "CGI", "T2D_new"))) |>
  ggplot(aes(x = Predicted, y = Actual, fill = Freq)) +
  geom_tile() +
  geom_text(aes(label = Freq), color = "black") +  
  scale_fill_gradient2(low = "#ffffff", high = "#ee4445") +  
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1))
```

Boxplots of top-features (\>50% Importance). HbA1c is a typical T2D clinical predictor.

```{r}
top_features <- glucosemodel$features |> 
  filter(Scaled_Importance > 50) |> 
  pull(Variable)

glucose_discovery |> 
  select(glucose.group, all_of(top_features)) |>
  pivot_longer(cols = -glucose.group, names_to = "Protein", values_to = "NPX") |>
  mutate(glucose.group = factor(glucose.group, levels = c("NGT_lowFINDRISC", "NGT_highFINDRISC", "IFG", "IGT", "CGI", "T2D_new")),
         Protein = factor(Protein, levels = top_features)) |>
  ggplot(aes(x = glucose.group, y = NPX, fill = glucose.group)) +
  geom_boxplot() +
  scale_fill_manual(values = glucosegroup_palette) +
  facet_wrap(~Protein, scales = "free_y") +
  labs(x = "Glucose Group", y = "NPX") +
  theme_hpa() + 
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 90, hjust = 1))
```

Barplot of AUCs.

```{r}
glucosemodel$auc |> 
  filter(Glucose_group %in% c("NGT_lowFINDRISC", "NGT_highFINDRISC", "IFG", "IGT", "CGI", "T2D_new")) |>
  mutate(Glucose_group = factor(Glucose_group, levels = c("NGT_lowFINDRISC", "NGT_highFINDRISC", "IFG", "IGT", "CGI", "T2D_new"))) |> 
  ggplot(aes(x = Glucose_group, y = AUC, fill = Glucose_group)) +
  geom_bar(stat = "identity", color = "black") +
  geom_text(aes(label = round(AUC, 2)), position = position_dodge(width = 0.9), vjust = -0.5) +
  scale_fill_manual(values = glucosegroup_palette) +
  labs(x = "Disease", y = "AUC") +
  theme_hpa() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1))
```

# Number of diseases per patient

```{r}
disease_vec <- c("Obesity", "IGT", "T2D", "MS", "MASLD", "Carotid_plaque", "CAC", "Sleep_apnea")
```

```{r, message = FALSE, results = 'hide'}
lasso_features <- readRDS("results/models_results/lasso_features.RData")
```

Select feature panel. I select features that have more than 50% Importance. In case that the disease has less than 3 features with more than 50% Importance, I select the top 3 features. On the other hand, if a disease has more than 30 features with more than 50% Importance, I select the top 20 features.

```{r}
top_3_protein <- lasso_features |> 
  group_by(Disease) |> 
  top_n(3, wt = Scaled_Importance)
  
proteomics_features_50 <- lasso_features |> 
  filter(Scaled_Importance > 50) |> 
  group_by(Disease) |>
  slice_max(order_by = Scaled_Importance, n = 20) |> 
  ungroup()

proteomics_features_list <- proteomics_features_50 |> 
  bind_rows(top_3_protein) |>
  pull(Variable) |> 
  unique()
```

```{r}
disease_count <- data_igt |> 
  select(DAid, all_of(disease_vec)) |> 
  pivot_longer(cols = -DAid, names_to = "Disease", values_to = "Disease_status") |> 
  filter(Disease_status == 1) |> 
  group_by(DAid) |> 
  summarise(n = n())
```

## UMAP analysis

```{r}
umap_res_before <- do_umap(data_igt |> select(-Sex, -Smoke_status, -all_of(disease_vec)),
        metadata |> 
          filter(DAid %in% data_igt$DAid) |> 
          left_join(disease_count) |> 
          mutate(n = factor(n),
                 n = ifelse(is.na(n), "0", n)),
        color = "n")

umap_res_before$umap_plot + scale_color_brewer(palette = "PuBuGn")

umap_res_after <- do_umap(data_igt |> select(DAid, any_of(proteomics_features_list), -Sex, -Smoke_status),
        metadata |> 
          filter(DAid %in% data_igt$DAid) |> 
          left_join(disease_count) |> 
          mutate(n = factor(n),
                 n = ifelse(is.na(n), "0", n)),
        color = "n")
umap_res_after$umap_plot + scale_color_brewer(palette = "PuBuGn")
```

## PCA analysis

```{r}
pca_res_before <- do_pca(data_igt |> select(-Sex, -Smoke_status, -all_of(disease_vec)),
        metadata |> 
          filter(DAid %in% data_igt$DAid) |> 
          left_join(disease_count) |> 
          mutate(n = factor(n),
                 n = ifelse(is.na(n), "0", n)),
        color = "n",
        pcs = 9)

pca_res_before$pca_plot + scale_color_brewer(palette = "PuBuGn")

pca_res_after <- do_pca(data_igt |> select(DAid, any_of(proteomics_features_list), -Sex, -Smoke_status),
        metadata |> 
          filter(DAid %in% data_igt$DAid) |> 
          left_join(disease_count) |> 
          mutate(n = factor(n),
                 n = ifelse(is.na(n), "0", n)),
        color = "n",
        pcs = 9)
pca_res_after$pca_plot + scale_color_brewer(palette = "PuBuGn")
```

## LASSO multi-class

```{r}
ndisease_discovery <- data_igt |> 
  left_join(disease_count, by = "DAid") |>
  select(-all_of(c("Obesity", "IGT", "T2D", "MS", "MASLD", "Carotid_plaque", "CAC", "Sleep_apnea"))) |> 
  relocate(n, .after = DAid) |> 
  mutate(n = factor(n),
         n = ifelse(is.na(n), "0", n)) |> 
  rename(ndisease = n)
```

```{r}
ndisease_discovery |> 
  group_by(ndisease) |> 
  summarise(patients = n())
```

```{r}
res <- lasso_multi(ndisease_discovery, "ndisease", cv_sets = 10, cor_threshold = 0.9, grid_size = 30)
```

```{r}
saveRDS(res, file="results/models/lasso_ndiseaseperpatient_multiclass.RData")
```

## LASSO multi-class - broader classes

```{r}
ndisease_discovery_broad <- ndisease_discovery |> 
  mutate(ndisease = case_when(
    ndisease %in% 0:1 ~ "Low",
    ndisease %in% 2:3 ~ "Mid",
    ndisease %in% 4:7 ~ "High"
  ))
```

```{r}
ndisease_discovery_broad |> 
  group_by(ndisease) |> 
  summarise(patients = n())
```

```{r}
res <- lasso_multi(ndisease_discovery_broad, "ndisease", cv_sets = 10, cor_threshold = 0.9, grid_size = 30)
```

```{r}
saveRDS(res, file="results/models/lasso_ndiseaseperpatient_broad_multiclass.RData")
```

## Visualize model results

```{r}
ndiseasemodel <- readRDS("results/models/lasso_ndiseaseperpatient_multiclass.RData")
ndiseasemodel_broad <- readRDS("results/models/lasso_ndiseaseperpatient_broad_multiclass.RData")
```

How many patients per disease number?

```{r}
ndisease_discovery |> 
  ggplot(aes(x = ndisease, fill = ndisease)) +
  geom_bar(color = "black") +
  labs(x = "Number of diseases", y = "Number of patients") +
  scale_fill_brewer(palette = "PuBuGn") +
  theme_hpa()
```

Stacked bar chart of the number of diseases per patient. For patients with more than 1 disease, the patients are divided by the number of diseases, so each patient contributes to the total number of diseases but still count as one patient.

```{r}
class_palette <- c("Healthy" = "lightgrey",
                   "Obesity" = "#E7662B", 
                   "IGT" = "#836879", 
                   "T2D" = "#321433",
                   "MS" = "#08585A", 
                   "MASLD" = "#FFD321", 
                   "Carotid_plaque" = "#E8A29A", 
                   "CAC" = "#9E0142", 
                   "Sleep_apnea" = "#A6CEE3")



disease_columns <- c("Obesity", "IGT", "T2D", "MS", "MASLD", "Carotid_plaque", "CAC", "Sleep_apnea")

# 1. Separate patients with 0 diseases
zero_disease_data <- ndisease_discovery |> 
  select(DAid, ndisease) |>
  left_join(metadata |> select(DAid, all_of(disease_columns)), by = "DAid") |>
  filter(ndisease == 0) |> 
  mutate(weight = 1, Disease = "Healthy") |> 
  select(DAid, ndisease, Disease, weight)

# 2. Process patients with 1 or more diseases
disease_data <- ndisease_discovery |> 
  select(DAid, ndisease) |>
  left_join(metadata |> select(DAid, all_of(disease_columns)), by = "DAid") |>
  filter(ndisease > 0) |> 
  pivot_longer(cols = all_of(disease_columns), names_to = "Disease", values_to = "Has_Disease") |> 
  filter(Has_Disease == 1) |> 
  group_by(DAid) |> 
  mutate(n_diseases = n()) |>   # Count how many diseases each patient has
  mutate(weight = 1 / n_diseases) |>   # Assign weight based on number of diseases
  ungroup()

# 3. Summarize the disease data
disease_summary <- disease_data |> 
  group_by(DAid, ndisease, Disease) |> 
  summarize(weight = sum(weight), .groups = 'drop')

# 4. Combine patients with 0 diseases back into the summarized data
combined_data <- bind_rows(disease_summary, zero_disease_data)

# 5. Create the stacked bar plot
ggplot(combined_data, aes(x = factor(ndisease), y = weight, fill = Disease)) +
  geom_bar(stat = "identity", position = "stack") +
  labs(x = "Number of Diseases", y = "Proportion of Patients", fill = "Disease") +
  theme_minimal() +
  scale_fill_manual(values = class_palette) +
  theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
  theme_hpa()
```

Upset plot for disease overlap.

```{r}
disease_palette <- c("Obesity" = "#E7662B", 
                     "IGT" = "#836879", 
                     "T2D" = "#321433",
                     "MS" = "#08585A", 
                     "MASLD" = "#FFD321", 
                     "Carotid_plaque" = "#E8A29A", 
                     "CAC" = "#9E0142", 
                     "Sleep_apnea" = "#A6CEE3")
```

```{r}
disease_list <- data_igt |> 
  select(DAid, all_of(disease_vec)) |>
  pivot_longer(cols = -DAid, names_to = "Disease", values_to = "Disease_status") |>
  filter(Disease_status == 1) |>
  select(-Disease_status) |> 
  group_by(Disease) |> 
  summarise(DAid = list(DAid)) |> 
  deframe()

feature_names <- names(disease_list)
ordered_colors <- disease_palette[feature_names]
frequencies <- sapply(disease_list, length)
ordered_feature_names <- names(sort(frequencies, decreasing = TRUE))
ordered_colors <- ordered_colors[ordered_feature_names]

upset <- UpSetR::fromList(disease_list)

UpSetR::upset(upset,
              sets = ordered_feature_names,
              order.by = "freq",
              nsets = length(ordered_feature_names),
              sets.bar.color = ordered_colors)
```

Confusion matrix visualization.

```{r}
cm_table <- as.data.frame(as.table(ndiseasemodel$confusion_matrix$table))
colnames(cm_table) <- c("Predicted", "Actual", "Freq")
cm_table |> 
  mutate(Predicted = factor(Predicted, levels = c("0", "1", "2", "3", "4", "5", "6", "7")),
         Actual = factor(Actual, levels = c("0", "1", "2", "3", "4", "5", "6", "7"))) |>
  ggplot(aes(x = Predicted, y = Actual, fill = Freq)) +
  geom_tile() +
  geom_text(aes(label = Freq), color = "black") +  
  scale_fill_gradient2(low = "#ffffff", high = "#ee4445") +  
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 0, hjust = 1))
```

```{r}
cm_table <- as.data.frame(as.table(ndiseasemodel_broad$confusion_matrix$table))
colnames(cm_table) <- c("Predicted", "Actual", "Freq")
cm_table |> 
  mutate(Predicted = factor(Predicted, levels = c("Low", "Mid", "High")),
         Actual = factor(Actual, levels = c("Low", "Mid", "High"))) |>
  ggplot(aes(x = Predicted, y = Actual, fill = Freq)) +
  geom_tile() +
  geom_text(aes(label = Freq), color = "black") +  
  scale_fill_gradient2(low = "#ffffff", high = "#ee4445") +  
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 0, hjust = 1))
```

Boxplots of top-features (\>50% Importance). HbA1c is a typical T2D clinical predictor.

```{r}
top_features <- ndiseasemodel$features |> 
  filter(Scaled_Importance > 50) |> 
  pull(Variable)

ndisease_discovery |> 
  select(ndisease, all_of(top_features)) |>
  pivot_longer(cols = -ndisease, names_to = "Protein", values_to = "NPX") |>
  mutate(ndisease = factor(ndisease, levels = c("Low", "Mid", "High")),
         Protein = factor(Protein, levels = top_features)) |>
  ggplot(aes(x = ndisease, y = NPX, fill = ndisease)) +
  geom_boxplot() +
  scale_fill_brewer(palette = "PuBuGn") +
  facet_wrap(~Protein, scales = "free_y") +
  labs(x = "Number of diseases", y = "NPX") +
  theme_hpa() + 
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 0, hjust = 1))
```

```{r}
top_features <- ndiseasemodel_broad$features |> 
  filter(Scaled_Importance > 50) |> 
  pull(Variable)

ndisease_discovery |> 
  select(ndisease, all_of(top_features)) |>
  pivot_longer(cols = -ndisease, names_to = "Protein", values_to = "NPX") |>
  mutate(ndisease = factor(ndisease, levels = c("0", "1", "2", "3", "4", "5", "6", "7")),
         Protein = factor(Protein, levels = top_features)) |>
  ggplot(aes(x = ndisease, y = NPX, fill = ndisease)) +
  geom_boxplot() +
  scale_fill_brewer(palette = "PuBuGn") +
  facet_wrap(~Protein, scales = "free_y") +
  labs(x = "Number of diseases", y = "NPX") +
  theme_hpa() + 
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 0, hjust = 1))
```

Barplot of AUCs.

```{r}
ndiseasemodel$auc |> 
  filter(ndisease %in% c("0", "1", "2", "3", "4", "5", "6", "7")) |>
  mutate(ndisease = factor(ndisease, levels = c("0", "1", "2", "3", "4", "5", "6", "7"))) |> 
  ggplot(aes(x = ndisease, y = AUC, fill = ndisease)) +
  geom_bar(stat = "identity", color = "black") +
  geom_text(aes(label = round(AUC, 2)), position = position_dodge(width = 0.9), vjust = -0.5) +
  scale_fill_brewer(palette = "PuBuGn") +
  labs(x = "Number of diseases", y = "AUC") +
  theme_hpa() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 0, hjust = 1))
```

Check if the features correlate with Age.

```{r}
ndisease_features <- ndiseasemodel$features |> 
  filter(Scaled_Importance > 50) |> 
  pull(Variable)

data_igt |> 
  select(DAid, all_of(ndisease_features), Age) |>
  pivot_longer(cols = -c("DAid", "Age"), names_to = "Protein", values_to = "NPX") |>
  left_join(ndisease_discovery |> select(DAid, ndisease), by = "DAid") |>
  ggplot(aes(x = Age, y = NPX)) +
  geom_point(aes(color = ndisease)) +
  scale_color_brewer(palette = "PuBuGn") +
  geom_smooth(color = "black") +
  facet_wrap(~Protein, scales = "free_y") +
  theme_hpa() +
  theme()
```

Check if number of diseases per patient correlates with Age.

```{r}
ndisease_discovery |> 
  select(ndisease, Age) |> 
  ggplot(aes(x = ndisease, y = Age, fill = ndisease)) +
  geom_boxplot() +
  scale_fill_brewer(palette = "PuBuGn") +
  labs(x = "Number of diseases", y = "Age") +
  theme_hpa() +
  theme(legend.position = "none")
```

Check if the features are identified from Olink insight as all-cause mortality biomarkers.

```{r}
olink_insight <- import_df("data/raw_data/UkbUnivariateDiseaseAssociations.csv")
```

All of the top features are identified by Olink insight as all-cause mortality biomarkers.

```{r}
allcausemortalitymarkers <- olink_insight |>
  filter(phenotype == "All-cause mortality",
         adjusted_pval < 0.05,
         hazard_ratio > 1.0) |>
  pull(Assay) |> 
  unique()

# Filter >50%
ndiseasemodel$features |> 
  #filter(Scaled_Importance > 50) |> 
  mutate(all_cause_mortality = ifelse(Variable %in% allcausemortalitymarkers, "Yes", "No")) |> 
  filter(Scaled_Importance > 50) |> 
  count(all_cause_mortality)

# No filter
ndiseasemodel$features |> 
  #filter(Scaled_Importance > 50) |> 
  mutate(all_cause_mortality = ifelse(Variable %in% allcausemortalitymarkers, "Yes", "No")) |> 
  filter(all_cause_mortality == "Yes") |> 
  rename(Assay = Variable) |>
  left_join(olink_insight |> 
              filter(phenotype == "All-cause mortality") |> 
              select(Assay, hazard_ratio, adjusted_pval))
```

### UMAP with specific features

If I reduce the threshold the first 2 PCs capture less variance. For >30% PC1 gets from 18% to 10%.

```{r}
ndisease_features <- ndiseasemodel$features |> filter(Scaled_Importance > 50) |> pull(Variable)
```

```{r}
umap_res_features <- do_umap(data_igt |> select(DAid, any_of(ndisease_features), -Sex, -Smoke_status),
        metadata |> 
          filter(DAid %in% data_igt$DAid) |> 
          left_join(disease_count) |> 
          mutate(n = factor(n),
                 n = ifelse(is.na(n), "0", n)),
        color = "n")
umap_res_features$umap_plot + scale_color_brewer(palette = "PuBuGn")
```

### PCA with specific features

```{r}
pca_res_features <- do_pca(data_igt |> select(DAid, any_of(ndisease_features), -Sex, -Smoke_status),
        metadata |> 
          filter(DAid %in% data_igt$DAid) |> 
          left_join(disease_count) |> 
          mutate(n = factor(n),
                 n = ifelse(is.na(n), "0", n)),
        color = "n",
        pcs = 9)
pca_res_features$pca_plot + scale_color_brewer(palette = "PuBuGn")
```

### Check overlap between all-cause mortality and pan-disease panel

```{r}
protein_sets <- list(Pandisease_panel = proteomics_features_list, nDisease_panel = ndisease_features)

# Create a Venn diagram with counts and set names inside the circles
venn.plot <- venn.diagram(
  x = protein_sets,
  category.names = c("Pan-disease Panel", "nDisease Panel"),
  filename = NULL,
  output = TRUE,
  fill = c("lightblue", "lightgreen"),
  cex = 2,
  cat.cex = 2,
  cat.pos = 0,
  cat.dist = 0.03,
  print.mode = c("raw")
)

# Display the Venn diagram
grid.draw(venn.plot)
```

Common proteins:

```{r}
common_proteins <- intersect(proteomics_features_list, ndisease_features)

print(common_proteins)
```